// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`async AuthenticationActions authenticate when TokenStore.fetch fails 1`] = `
Array [
  Object {
    "error": "Error",
    "type": "AUTHENTICATE_FAILURE",
  },
]
`;

exports[`async AuthenticationActions authenticate when TokenStore.fetch is successful 1`] = `
Array [
  Object {
    "accessToken": Object {
      "accessToken": "token",
    },
    "type": "VERIFY_TOKEN",
  },
]
`;

exports[`async AuthenticationActions confirmation when confirmation fails 1`] = `
Array [
  Object {
    "error": "Invalid credentials",
    "type": "CONFIRMATION_FAILURE",
  },
]
`;

exports[`async AuthenticationActions confirmation when confirmation is successful 1`] = `
Array [
  Object {
    "accessToken": Object {
      "accessToken": "token",
    },
    "type": "VERIFY_TOKEN",
  },
  Object {
    "type": "CONFIRMATION_SUCCESS",
  },
  Object {
    "id": undefined,
    "notification": Object {
      "level": "success",
      "message": "Account successfully confirmed! You are now logged in",
    },
    "type": "CREATE_NOTIFICATION",
  },
  Object {
    "data": Object {
      "id": "CONFIRMATION_MODAL",
    },
    "type": "HIDE_MODAL",
  },
]
`;

exports[`async AuthenticationActions login when login fails 1`] = `
Array [
  Object {
    "error": "Invalid credentials",
    "type": "AUTHENTICATE_FAILURE",
  },
]
`;

exports[`async AuthenticationActions login when login is successful 1`] = `
Array [
  Object {
    "accessToken": Object {
      "accessToken": "code",
    },
    "type": "VERIFY_TOKEN",
  },
  Object {
    "id": undefined,
    "notification": Object {
      "level": "success",
      "message": "Logged in successfully",
    },
    "type": "CREATE_NOTIFICATION",
  },
  Object {
    "data": Object {
      "id": "LOGIN_MODAL",
    },
    "type": "HIDE_MODAL",
  },
]
`;

exports[`async AuthenticationActions passwordResetRequestSuccess matches snapshot 1`] = `
Object {
  "data": Object {
    "message": "message",
  },
  "type": "PASSWORD_RESET_REQUEST_SUCCESS",
}
`;

exports[`async AuthenticationActions register when registration fails 1`] = `
Array [
  Object {
    "error": Object {
      "email": "Has already been taken",
    },
    "type": "REGISTER_FAILURE",
  },
]
`;

exports[`async AuthenticationActions register when registration is successful 1`] = `
Array [
  Object {
    "type": "REGISTER_SUCCESS",
    "user": Object {
      "email": "email@email.com",
      "id": 1,
      "name": "Bob",
    },
  },
  Object {
    "id": "AUTHENTICATION",
    "notification": Object {
      "level": "success",
      "message": "An email confirmation has been sent",
    },
    "type": "CREATE_NOTIFICATION",
  },
  Object {
    "data": Object {
      "id": "REGISTRATION_MODAL",
    },
    "type": "HIDE_MODAL",
  },
  Object {
    "data": Object {
      "id": "CONFIRMATION_MODAL",
    },
    "type": "SHOW_MODAL",
  },
  Object {
    "meta": Object {
      "form": "CONFIRMATION",
      "keepDirty": undefined,
    },
    "payload": Immutable.Map {
      name: "Bob",
      email: "email@email.com",
      password: "password",
      passwordConfirmation: "password",
},
    "type": "@@redux-form/INITIALIZE",
  },
]
`;

exports[`async AuthenticationActions resendConfirmation when resendConfirmation fails 1`] = `
Array [
  Object {
    "error": "Invalid credentials",
    "type": "RESEND_CONFIRMATION_FAILURE",
  },
]
`;

exports[`async AuthenticationActions resendConfirmation when resendConfirmation is successful 1`] = `
Array [
  Object {
    "id": "AUTHENTICATION",
    "notification": Object {
      "level": "success",
      "message": "If an account exists we have sent a confirmation code",
    },
    "type": "CREATE_NOTIFICATION",
  },
  Object {
    "data": Object {
      "id": "CONFIRMATION_MODAL",
    },
    "type": "SHOW_MODAL",
  },
  Object {
    "meta": Object {
      "form": "CONFIRMATION",
      "keepDirty": undefined,
    },
    "payload": Immutable.Map {
      email: "email@email.com",
},
    "type": "@@redux-form/INITIALIZE",
  },
]
`;

exports[`async AuthenticationActions signOut when AuthenticationSources.signOut fails 1`] = `
Array [
  Object {
    "id": undefined,
    "notification": Object {
      "level": "negative",
      "message": "Something went wrong",
    },
    "type": "CREATE_NOTIFICATION",
  },
  Object {
    "type": "SIGN_OUT_FAILURE",
  },
]
`;

exports[`async AuthenticationActions signOut when AuthenticationSources.signOut is successful 1`] = `
Array [
  Object {
    "type": "SIGN_OUT_SUCCESS",
  },
]
`;
